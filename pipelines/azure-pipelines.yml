trigger: none
pool:
  name: Ansys
steps:
- template: cleaning_env.yml
- script: |
    pushd ..\
    echo "Create python virtual environment"
    mkdir py_venv
    python -m pip install --user pipenv
    python -m venv py_venv

    # activate virtual environment only via .bat
    call py_venv\Scripts\activate.bat
    python -m pip install -r requirements.txt
    echo "Python dependencies are installed"
    popd
  displayName: 'Install Python Dependencies'

- script: |
    pushd ..\
    echo Start packaging Python
    call py_venv\Scripts\activate.bat
    cd electron_ui
    pyinstaller.exe ..\downloader_backend.py --distpath python_build --workpath %TEMP% --exclude-module tkinter --onefile --noconsole  --hidden-import plyer.platforms.win.notification
    Xcopy /E /I ..\notifications python_build\notifications
    popd
  displayName: 'Build Python Exe'

- script: |
    pushd ..\
    echo "Create python dev virtual environment"
    mkdir py_venv_dev
    python -m pip install --user pipenv
    python -m venv py_venv_dev

    # activate virtual environment only via .bat
    call py_venv_dev\Scripts\activate.bat
    python -m pip install -r requirements-dev.txt
    echo "Python dev dependencies are installed"
    popd
  displayName: 'Install Python Dev Dependencies'


- script: |
    pushd ..\
    call py_venv_dev\Scripts\activate.bat
    python tests\unittests\test_version.py
    call py_venv_dev\Scripts\deactivate.bat
    popd
  displayName: 'Validate that all versions are updated'

- script: |
    pushd ..\
    call py_venv_dev\Scripts\activate.bat
    python -m unittest tests.unittests.test_backend
    call py_venv_dev\Scripts\deactivate.bat
    popd
  displayName: 'Run unittests'

- script: |
    pushd ..\
    call py_venv_dev\Scripts\activate.bat
    python -m black -l 120 tests\unittests --check
    python -m black -l 120 downloader_backend.py --check
    call py_venv_dev\Scripts\deactivate.bat
    popd
  displayName: 'Run black check'

- script: |
    pushd ..\electron_ui
    echo "Current working directory is %CD%"
    npm install
    echo "Dependencies are installed"
    popd
  displayName: 'Install NodeJS Dependencies'

- script: |
    set GH_TOKEN=$(gh_token)
    pushd ..\electron_ui
    npm run deploy
    popd
  displayName: 'Build and Deploy Electron App to GitHub'

- script: |
    pushd ..\
    call py_venv_dev\Scripts\activate.bat
    python "server\\publish_on_electron_release_server.py" --channel="stable" --platform="windows_64"  --base-url="http://ottbld02:1337" --username="admin" --password="$(password)" --path="%CD%\\electron_ui\\dist"
    popd
  displayName: 'Upload build to Electron Release Server'

- template: cleaning_env.yml